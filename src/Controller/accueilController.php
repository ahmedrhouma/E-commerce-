<?php  // src/Controller/InscriptionController.php
namespace App\Controller;

use App\Entity\Article;
use App\Form\ArticleType;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use App\Repository\ArticleRepository;
use App\Repository\CategorieRepository;
use App\Repository\CommandeRepository;
use Symfony\Component\Security\Core\Security;
use App\Repository\PanierRepository;
use Symfony\Component\Form\Extension\Core\Type\FileType;




Class accueilController extends Controller
{

    /**
     * @Route("/register/confirmed", name="register confirmed")
    */

    public function register(Request $request)
    {  

       
        $router = $this->container->get('router');
        return new RedirectResponse($router->generate('Accueil'), 307);

    }

    /**
     * @Route("/", name="home")
    */
    public function homeAction(Request $request,PanierRepository $panierRepository,Security $security,ArticleRepository $articleRepository)
    {
        $authChecker = $this->container->get('security.authorization_checker');
        $router = $this->container->get('router');
        $user = $security->getUser();
        $nbpanier=count($panierRepository->findBy(['User' => $user ]));
        if ($authChecker->isGranted('ROLE_ADMIN')) {
            return new RedirectResponse($router->generate('dashboard'), 307);
        }else return $this->render('accueil/home.html.twig',['paniers' => $panierRepository->findBy(['User' => $user ]),'nbpanier' => $nbpanier]);

    }
    /**
     * @Route("/admin/dashboard", name="dashboard", methods={"GET","POST"})
     * 
    */

    public function liste(Request $request,ArticleRepository $articleRepository,CommandeRepository $commandeRepository,
        CategorieRepository $categorieRepository)
    {   
        $article = new Article();
        $form = $this->createForm(ArticleType::class, $article);
        $form->handleRequest($request);

        

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $article->getimage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // Move the file to the directory where images are stored
            try {
                $file->move(
                    $this->getParameter('uploads_directory'),
                    $fileName
                );

            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'image' property to store the PDF file name
            // instead of its contents
            $article->setimage($fileName);
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($article);
            $entityManager->flush();
        }
        $userManager = $this->get('fos_user.user_manager');
        $users = $userManager->findUsers();
        $nbuser=count($users);

        $nbarticle=count($articleRepository->findAll());

        $nbcommande=count($commandeRepository->findAll());

        $nbcategorie=count($categorieRepository->findAll());

       return $this->render('accueil/dashboard.html.twig', [
            'articles' => $articleRepository->findAll(),'nbuser' => $nbuser,'nbarticle' => $nbarticle , 'nbcommande' => $nbcommande , 'nbcategorie' => $nbcategorie,'form' => $form->createView(),
        ]); 

    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/contact", name="contact")
     * 
    */
   public function contact(PanierRepository $panierRepository,Security $security)
    {$user = $security->getUser();
              $nbpanier=count($panierRepository->findBy(['User' => $user ]));

       return $this->render('accueil/contact2.html.twig',['paniers' => $panierRepository->findBy(['User' => $user ]),'nbpanier' => $nbpanier]);
     }
}
?>